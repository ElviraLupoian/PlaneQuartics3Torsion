using HomotopyContinuation, LinearAlgebra, DataFrames, CSV

@var a1, a2, a3, a4, a5, a6, b1, b2, b3, b4, b5

e1 = -a6^3 + b1*b4^3;
e2 = a2^3 + 3*a2*a6 - 3*a5*a6^2 + 3*b1*b3*b4^2;
e3 = 3*a1*a2^2 + 3*a1*a6 + 3*a2*a5 - 3*a4*a6^2 - 3*a5^2*a6 + 3*b1*b2*b4^2 + 3*b1*b3^2*b4 + 1;
e4 = 3*a1^2*a2 + 3*a1*a5 - a2^2*a6 + 3*a2*a4 - 3*a3*a6^2 - 6*a4*a5*a6 - a5^3 - 2*a6^2 + 6*b1*b2*b3*b4 + b1*b3^3 + 3*b1*b4^2;
e5 = a1^3 - 2*a1*a2*a6 + 3*a1*a4 - a2^2*a5 + 3*a2*a3 + a2 - 6*a3*a5*a6 - 3*a4^2*a6 - 3*a4*a5^2 - 4*a5*a6 + 3*b1*b2^2*b4 + 3*b1*b2*b3^2 + 6*b1*b3*b4;
e6 = -a1^2*a6 - 2*a1*a2*a5 + 3*a1*a3 + a1 - a2^2*a4 - 6*a3*a4*a6 - 3*a3*a5^2 - 3*a4^2*a5 - 4*a4*a6 - 2*a5^2 + 3*b1*b2^2*b3 + 6*b1*b2*b4 + 3*b1*b3^2;
e7 = -a1^2*a5 - 2*a1*a2*a4 - a2^2*a3 - 3*a3^2*a6 - 6*a3*a4*a5 - 4*a3*a6 - a4^3 - 4*a4*a5 - a6 + b1*b2^3 + 6*b1*b2*b3 + 3*b1*b4;
e8 = -a1^2*a4 - 2*a1*a2*a3 - 3*a3^2*a5 - 3*a3*a4^2 - 4*a3*a5 - 2*a4^2 - a5 + 3*b1*b2^2 + 3*b1*b3;
e9 = -a1^2*a3 - 3*a3^2*a4 - 4*a3*a4 - a4 + 3*b1*b2;
e10 = -a3^3 - 2*a3^2 - a3 + b1;
e11 = a1^9*a3*a6^3*b5 - 3*a1^8*a2*a3*a5*a6^2*b5 + 2*a1^8*a3*a6^2*b5 + 3*a1^7*a2^2*a3*a4*a6^2*b5 + 3*a1^7*a2^2*a3*a5^2*a6*b5 + a1^7*a2^2*a3*b5 - a1^7*a2*a3*a5*a6*b5 + a1^7*a3*a6*b5 - a1^7*a4*a6^3*b5 - 3*a1^6*a2^3*a3^2*a6^2*b5 - 6*a1^6*a2^3*a3*a4*a5*a6*b5 - a1^6*a2^3*a3*a5^3*b5 - a1^6*a2^3*a3*a6^2*b5 - 2*a1^6*a2^2*a3*a4*a6*b5 - a1^6*a2^2*a3*a5^2*b5 - 6*a1^6*a2*a3*a6^3*b5 + 3*a1^6*a2*a4*a5*a6^2*b5 + 2*a1^6*a3*a4*a6^2*b5 - a1^6*a3*a5^2*a6*b5 - 2*a1^6*a4*a6^2*b5 + 6*a1^5*a2^4*a3^2*a5*a6*b5 + 3*a1^5*a2^4*a3*a4^2*a6*b5 + 3*a1^5*a2^4*a3*a4*a5^2*b5 + 2*a1^5*a2^4*a3*a5*a6*b5 + 5*a1^5*a2^3*a3^2*a6*b5 + 5*a1^5*a2^3*a3*a4*a5*b5 + a1^5*a2^3*a3*a6*b5 + 2*a1^5*a2^2*a3*a4*b5 + 15*a1^5*a2^2*a3*a5*a6^2*b5 - 3*a1^5*a2^2*a4^2*a6^2*b5 - 3*a1^5*a2^2*a4*a5^2*a6*b5 - a1^5*a2^2*a4*b5 - 9*a1^5*a2*a3^2*a6^2*b5 + 3*a1^5*a2*a3*a4*a5*a6*b5 - 13*a1^5*a2*a3*a6^2*b5 + a1^5*a2*a4*a5*a6*b5 + 2*a1^5*a3*a4*a6*b5 -a1^5*a4*a6*b5 + a1^5*a5*a6^3*b5 - 6*a1^4*a2^5*a3^2*a4*a6*b5 - 3*a1^4*a2^5*a3^2*a5^2*b5 - 3*a1^4*a2^5*a3*a4^2*a5*b5 - 2*a1^4*a2^5*a3*a4*a6*b5 - a1^4*a2^5*a3*a5^2*b5 - 8*a1^4*a2^4*a3^2*a5*b5 - 4*a1^4*a2^4*a3*a4^2*b5 - 3*a1^4*a2^4*a3*a5*b5 - 7*a1^4*a2^3*a3^2*b5 - 7*a1^4*a2^3*a3*a4*a6^2*b5 - 13*a1^4*a2^3*a3*a5^2*a6*b5 - 7*a1^4*a2^3*a3*b5 + 6*a1^4*a2^3*a4^2*a5*a6*b5 + a1^4*a2^3*a4*a5^3*b5 + a1^4*a2^3*a4*a6^2*b5 + 3*a1^4*a2^2*a3^2*a5*a6*b5 - 6*a1^4*a2^2*a3*a4^2*a6*b5 + 5*a1^4*a2^2*a3*a5*a6*b5 + 2*a1^4*a2^2*a4^2*a6*b5 + a1^4*a2^2*a4*a5^2*b5 - 7*a1^4*a2*a3^2*a6*b5 - 7*a1^4*a2*a3*a6*b5 + 4*a1^4*a2*a4*a6^3*b5 - 3*a1^4*a2*a5^2*a6^2*b5 - a1^4*a3*a5*a6^2*b5 - 2*a1^4*a4^2*a6^2*b5 + a1^4*a4*a5^2*a6*b5 + 2*a1^4*a5*a6^2*b5 + 3*a1^3*a2^6*a3^3*a6*b5 + 6*a1^3*a2^6*a3^2*a4*a5*b5 + 2*a1^3*a2^6*a3^2*a6*b5 + a1^3*a2^6*a3*a4^3*b5 + 2*a1^3*a2^6*a3*a4*a5*b5 + 11*a1^3*a2^5*a3^2*a4*b5 + 5*a1^3*a2^5*a3*a4*b5 + 3*a1^3*a2^4*a3^2*a6^2*b5 + 12*a1^3*a2^4*a3*a4*a5*a6*b5 + 4*a1^3*a2^4*a3*a5^3*b5 + 6*a1^3*a2^4*a3*a6^2*b5 - 3*a1^3*a2^4*a4^3*a6*b5 - 3*a1^3*a2^4*a4^2*a5^2*b5 - 2*a1^3*a2^4*a4*a5*a6*b5 + 17*a1^3*a2^3*a3^2*a4*a6*b5 - 2*a1^3*a2^3*a3^2*a5^2*b5 + a1^3*a2^3*a3*a4^2*a5*b5 + 8*a1^3*a2^3*a3*a4*a6*b5 + 3*a1^3*a2^3*a3*a5^2*b5 - 5*a1^3*a2^3*a4^2*a5*b5 - a1^3*a2^3*a4*a6*b5 - 2*a1^3*a2^2*a3^2*a5*b5 + a1^3*a2^2*a3*a4^2*b5 -  a1^3*a2^2*a3*a5*b5 + 3*a1^3*a2^2*a3*a6^3*b5 - 2*a1^3*a2^2*a4^2*b5 - 6*a1^3*a2^2*a4*a5*a6^2*b5 + 3*a1^3*a2^2*a5^3*a6*b5 + a1^3*a2^2*a5*b5 + 7*a1^3*a2*a3*a4*a6^2*b5 + 4*a1^3*a2*a3*a5^2*a6*b5 - 3*a1^3*a2*a4^2*a5*a6*b5 + 9*a1^3*a2*a4*a6^2*b5 - a1^3*a2*a5^2*a6*b5 - 2*a1^3*a3^2*a5*a6*b5 + a1^3*a3*a4^2*a6*b5 - a1^3*a3*a5*a6*b5 - 2*a1^3*a4^2*a6*b5 + a1^3*a5*a6*b5 - a1^3*a6^4*b5 - 3*a1^2*a2^7*a3^3*a5*b5 - 3*a1^2*a2^7*a3^2*a4^2*b5 - 2*a1^2*a2^7*a3^2*a5*b5 - a1^2*a2^7*a3*a4^2*b5 - 7*a1^2*a2^6*a3^3*b5 - 7*a1^2*a2^6*a3^2*b5 - 6*a1^2*a2^5*a3^2*a5*a6*b5 - 6*a1^2*a2^5*a3*a4*a5^2*b5 - 9*a1^2*a2^5*a3*a5*a6*b5 + 3*a1^2*a2^5*a4^3*a5*b5 + 2*a1^2*a2^5*a4^2*a6*b5 + a1^2*a2^5*a4*a5^2*b5 - 18*a1^2*a2^4*a3^3*a6*b5 - 3*a1^2*a2^4*a3^2*a4*a5*b5 - 23*a1^2*a2^4*a3^2*a6*b5 - 7*a1^2*a2^4*a3*a4*a5*b5 - 5*a1^2*a2^4*a3*a6*b5 + 4*a1^2*a2^4*a4^3*b5 + 3*a1^2*a2^4*a4*a5*b5 - 3*a1^2*a2^3*a3^2*a4*b5 + 2*a1^2*a2^3*a3*a4*b5 - 4*a1^2*a2^3*a3*a5*a6^2*b5 + 4*a1^2*a2^3*a4^2*a6^2*b5 + a1^2*a2^3*a4*a5^2*a6*b5 + 5*a1^2*a2^3*a4*b5 - a1^2*a2^3*a5^4*b5 - a1^2*a2^3*a5*a6^2*b5 + 9*a1^2*a2^2*a3^2*a6^2*b5 - 15*a1^2*a2^2*a3*a4*a5*a6*b5 + 9*a1^2*a2^2*a3*a6^2*b5 + 6*a1^2*a2^2*a4^3*a6*b5 - 5*a1^2*a2^2*a4*a5*a6*b5 - a1^2*a2^2*a5^3*b5 - 3*a1^2*a2*a3^2*a4*a6*b5 + 2*a1^2*a2*a3*a4*a6*b5 + 5*a1^2*a2*a4*a6*b5 + a1^2*a2*a5*a6^3*b5 - 3*a1^2*a3*a6^3*b5 + 3*a1^2*a4*a5*a6^2*b5 - a1^2*a5^3*a6*b5 - 3*a1^2*a6^3*b5 + 3*a1*a2^8*a3^3*a4*b5 + 2*a1*a2^8*a3^2*a4*b5 - a1*a2^6*a3^2*a4*a6*b5 + 4*a1*a2^6*a3^2*a5^2*b5 + a1*a2^6*a3*a4^2*a5*b5 + 2*a1*a2^6*a3*a4*a6*b5 + 4*a1*a2^6*a3*a5^2*b5 - a1*a2^6*a4^4*b5 - 2*a1*a2^6*a4^2*a5*b5 + 6*a1*a2^5*a3^3*a5*b5 + 17*a1*a2^5*a3^2*a5*b5 - 3*a1*a2^5*a3*a4^2*b5 + 11*a1*a2^5*a3*a5*b5 - 5*a1*a2^5*a4^2*b5 + 7*a1*a2^4*a3^3*b5 + 14*a1*a2^4*a3^2*b5 - a1*a2^4*a3*a4*a6^2*b5 + 2*a1*a2^4*a3*a5^2*a6*b5 + 7*a1*a2^4*a3*b5 - 3*a1*a2^4*a4^2*a5*a6*b5 + a1*a2^4*a4*a5^3*b5 - 4*a1*a2^4*a4*a6^2*b5 + 2*a1*a2^4*a5^2*a6*b5 + 7*a1*a2^3*a3^2*a5*a6*b5 - 5*a1*a2^3*a3*a4^2*a6*b5 + 3*a1*a2^3*a3*a4*a5^2*b5 + 8*a1*a2^3*a3*a5*a6*b5 - a1*a2^3*a4^3*a5*b5 - 9*a1*a2^3*a4^2*a6*b5 + 4*a1*a2^3*a4*a5^2*b5 + a1*a2^3*a5*a6*b5 + 9*a1*a2^2*a3^3*a6*b5 + 17*a1*a2^2*a3^2*a6*b5 + 3*a1*a2^2*a3*a4*a5*b5 + 7*a1*a2^2*a3*a6*b5 - a1*a2^2*a4^3*b5 + 3*a1*a2^2*a4*a5*b5 - a1*a2^2*a4*a6^3*b5 - a1*a2^2*a6*b5 -a1*a2*a3*a5*a6^2*b5 - 2*a1*a2*a4^2*a6^2*b5 + a1*a2*a4*a5^2*a6*b5 - a1*a2*a5*a6^2*b5 - 3*a1*a3^2*a6^2*b5 + 3*a1*a3*a4*a5*a6*b5 - 6*a1*a3*a6^2*b5 - a1*a4^3*a6*b5 + 3*a1*a4*a5*a6*b5 - 3*a1*a6^2*b5 - a2^9*a3^4*b5 - a2^9*a3^3*b5 + 3*a2^7*a3^3*a6*b5 - 3*a2^7*a3^2*a4*a5*b5 + 3*a2^7*a3^2*a6*b5 + a2^7*a3*a4^3*b5 - 3*a2^7*a3*a4*a5*b5 + a2^7*a4^3*b5 - a2^6*a3^3*a4*b5 - 4*a2^6*a3^2*a4*b5 - 3*a2^6*a3*a4*b5 - 3*a2^5*a3^2*a6^2*b5 + 3*a2^5*a3*a4*a5*a6*b5 - a2^5*a3*a5^3*b5 - 3*a2^5*a3*a6^2*b5 + 3*a2^5*a4*a5*a6*b5 - a2^5*a5^3*b5 - a2^4*a3^2*a4*a6*b5 - 2*a2^4*a3^2*a5^2*b5 + a2^4*a3*a4^2*a5*b5 + 2*a2^4*a3*a4*a6*b5 - 5*a2^4*a3*a5^2*b5 + a2^4*a4^2*a5*b5 + 3*a2^4*a4*a6*b5 - 3*a2^4*a5^2*b5 - a2^3*a3^3*a5*b5 - 5*a2^3*a3^2*a5*b5 + a2^3*a3*a4^2*b5 - 7*a2^3*a3*a5*b5 + a2^3*a3*a6^3*b5 + a2^3*a4^2*b5 - 3*a2^3*a5*b5 + a2^3*a6^3*b5 - a2^2*a3^3*b5 - 3*a2^2*a3^2*b5 + 2*a2^2*a3*a4*a6^2*b5 - a2^2*a3*a5^2*a6*b5 - 3*a2^2*a3*b5 + 2*a2^2*a4*a6^2*b5 - a2^2*a5^2*a6*b5 - a2^2*b5 - 2*a2*a3^2*a5*a6*b5 + a2*a3*a4^2*a6*b5 - 4*a2*a3*a5*a6*b5 + a2*a4^2*a6*b5 - 2*a2*a5*a6*b5 - a3^3*a6*b5 - 3*a3^2*a6*b5 - 3*a3*a6*b5 - a6*b5 + 1;
es = [ e1; e2; e3; e4; e5; e6; e7; e8; e9; e10; e11];
R = System(es, variables = [a1, a2, a3, a4, a5, a6, b1, b2, b3, b4, b5]);
s = solve(R);

solns = solutions(s);
N = length(solns);
save_dat = [[data[i][j] for i in range(1, N)] for j in range(1, 11)];
out = DataFrame(save_dat, ["a1", "a2", "a3", "a4", "a5", "a6", "b1", "b2", "b3", "b4", "b5"]);
CSV.write("klein_approx.csv", out);
